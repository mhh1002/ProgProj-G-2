import processing.data.Table; //<>// //<>//
// List to store flights for selected daate
ArrayList<Flight> flightsForDate;
ArrayList<Flight> flights = new ArrayList<Flight>();

// Variables for scrolling
int initial_y = 60;
int initial_x = 10;
int scrollOffset = 0;
int rowHeight = 30;
int selectedBarIndex = -1;
int cancelledCount = 0; // Count for cancelled (1)
int notCancelledCount = 0; // Count for not cancelled (0)
float notCancelledHeight;
float cancelledHeight;
boolean showFlightScreen = false; // Switch between bar chart and flight details screen
String selectedDate = "";
Widget backButton;

void setup() {
  size(1000, 700);
  flightsForDate = new ArrayList<Flight>();
  //loadFlightData("flights_full.csv"); // Load all the flights in allFlights
  readData("flights_full.csv");
  countCancelledFlights();


  // Initialise back button
  PFont buttonFont = createFont("Arial", 16);
  backButton = new Widget(10, 10, 80, 30, "BACK", color(30, 100, 90), buttonFont, 1);
  backButton.setLabelColor(color(255));
}

void draw() {
  background(240);

  if (showFlightScreen) {
    displayFlights();
    backButton.draw();

    if (backButton.getEvent(mouseX, mouseY) != backButton.EVENT_NULL) {
      backButton.mouseOver();
    } else {
      backButton.mouseNotOver();
    }
  } else {
    drawBarChart();
  }
}



void countCancelledFlights() {
  for (Flight flight : flights) {
    if (flight.cancelled) {
      cancelledCount++;
    } else {
      notCancelledCount++;
    }
  }
}

void drawBarChart() {
  int margin = 100;
  int chartHeight = height - 2 * margin;
  int barWidth = (width - 2 * margin) / 2;
  int maxCount = max(cancelledCount, notCancelledCount);

  stroke(0);
  line(margin, margin, margin, height - margin);
  line(margin, height - margin, width - margin, height - margin);

  fill(100, 150, 90);
  notCancelledHeight = map(notCancelledCount, 0, maxCount, 0, chartHeight);
  rect(margin, height - margin - notCancelledHeight, barWidth, notCancelledHeight);

  fill(200, 79, 130);
  cancelledHeight = map(cancelledCount, 0, maxCount, 0, chartHeight);
  rect(margin + barWidth + 20, height - margin - cancelledHeight, barWidth, cancelledHeight);

  fill(0);
  textAlign(CENTER);
  textSize(14);
  text("Not Cancelled", margin + barWidth / 2, height - margin + 30);
  text("Cancelled", margin + barWidth + 20 + barWidth / 2, height - margin + 30);
  text("Total: " + notCancelledCount, margin + barWidth / 2, height - margin - notCancelledHeight - 10);
  text("Total: " + cancelledCount, margin + barWidth + 20 + barWidth / 2, height - margin - cancelledHeight - 10);
}

void displayFlights() {
  fill(100, 93, 170);
  textSize(14);
  int y = initial_y - scrollOffset; // intial y position

  for (int i = 0; i < flightsForDate.size(); i++) {
    Flight dp = flightsForDate.get(i);

    if (y > 30 && y < height - 30) {
      String flightInfo = dp.getDisplayString();
      textAlign(LEFT, 60);
      text(flightInfo, initial_x, y); // Display flight details
    }
    y += rowHeight; // Move down for next query
  }
}

void mouseWheel(MouseEvent event) {
  if (showFlightScreen) {
    scrollOffset += event.getCount() * rowHeight; // Adjust scroll pos based on wheel movement
    scrollOffset = constrain(scrollOffset, 0, max(0, flightsForDate.size() * rowHeight - height + 60)); // Ensure in the screen
  }
}

void mousePressed() {
  if (showFlightScreen) {
    if (backButton.getEvent(mouseX, mouseY) == 1) {
      showFlightScreen = false; // pressed back button
    }
  } else {
    int margin = 100;
    int barWidth = (width - 2 * margin) / 2;
    int cancelledBarX = margin + barWidth + 20;
    int notCancelledBarX = margin;
    float cancelledBarTop = height - margin - cancelledHeight;
    float cancelledBarBtm = cancelledBarTop + cancelledHeight;
    float notCancelledBarTop = height - margin - notCancelledHeight;
    float notCancelledBarBtm = notCancelledBarTop + notCancelledHeight;

    if (mouseX > notCancelledBarX && mouseX < notCancelledBarX + barWidth && mouseY > notCancelledBarTop && mouseY < notCancelledBarBtm) {
      onBarClick(false); // Show non-cancelled flights
    } else if (mouseX > cancelledBarX && mouseX < cancelledBarX + barWidth && mouseY > cancelledBarTop && mouseY < cancelledBarBtm) {
      onBarClick(true); // Show cancelled flights
    }
  }
}

// Call this function when bar is clicked
void onBarClick(boolean isCancelled) {
  flightsForDate.clear(); // Clear all previous results
  for (Flight dp : flights) {
    if ((isCancelled && dp.cancelled) || (!isCancelled && !dp.cancelled)) { // Match flight date to selected date
      flightsForDate.add(dp); // Add flight to List
    }
  }

  showFlightScreen = true;
  scrollOffset = 0;
}
