import processing.data.Table;
import processing.data.TableRow;
import java.util.ArrayList;

ArrayList<String> flightData = new ArrayList<String>();
boolean flightInfoScreen = false;
int selectedBarIndex = -1;
int margin = 50;
int[] flightsPerDay;
PFont font;

void setup() {
  size(1000, 700); // Larger size for better data display
  smooth();
  font = createFont("Arial", 12);
  textFont(font);
  
  flightsPerDay = new int[31];
  loadFlightData();
}

void loadFlightData() {
  Table table = loadTable("flights_full.csv", "header");
  if (table == null) {
    println("Error: Could not load the CSV file");
    return;
  }
  
  for (TableRow row : table.rows()) {
    try {
      String date = row.getString(0);
      String[] dateParts = split(date, ' ')[0].split("/");
      int day = int(dateParts[1]);
      
      if (day >= 1 && day <= 31) {
        flightsPerDay[day-1]++;
      }
    } catch (Exception e) {
      println("Skipping row: " + e);
    }
  }
}

void draw() {
  background(240);
  
  if (flightInfoScreen) {
    drawFlightInfoScreen();
  } else {
    drawBarChart();
    drawChartTitle();
  }
}

void drawBarChart() {
  int barWidth = (width - 2 * margin) / 31;
  int chartHeight = height - 2 * margin - 50;
  
  stroke(0);
  line(margin, margin + 50, margin, height - margin);
  line(margin, height - margin, width - margin, height - margin);
  
  int maxFlights = max(flightsPerDay);
  if (maxFlights == 0) maxFlights = 1;
  
  for (int i = 0; i < 31; i++) {
    float barHeight = map(flightsPerDay[i], 0, maxFlights, 0, chartHeight);
    
    fill(i == selectedBarIndex ? color(255, 150, 0) : color(100, 150, 255));
    rect(margin + i * barWidth, height - margin - barHeight, barWidth - 2, barHeight);
    
    fill(0);
    textSize(10);
    textAlign(CENTER);
    text(i + 1, margin + i * barWidth + barWidth/2, height - margin + 15);
    
    if (flightsPerDay[i] > 0) {
      text(flightsPerDay[i], margin + i * barWidth + barWidth/2, height - margin - barHeight - 5);
    }
  }
}

void drawChartTitle() {
  fill(0);
  textSize(20);
  textAlign(CENTER);
  text("Monthly Flight Counts", width/2, 40);
  textSize(14);
  text("Click on any bar to view flight details", width/2, 70);
}

void mousePressed() {
  if (flightInfoScreen) {
    if (mouseX > width - 100 && mouseX < width - 20 && mouseY > 20 && mouseY < 60) {
      flightInfoScreen = false;
    }
  } else {
    int barWidth = (width - 2 * margin) / 31;
    int clickedBar = (mouseX - margin) / barWidth;
    
    if (clickedBar >= 0 && clickedBar < 31 && mouseY >= margin + 50 && mouseY <= height - margin) {
      selectedBarIndex = clickedBar;
      fetchFlightData(clickedBar + 1);
      flightInfoScreen = true;
    }
  }
}

void fetchFlightData(int day) {
  flightData.clear();
  Table table = loadTable("flights_full.csv", "header");
  
  if (table == null) {
    flightData.add("Error loading flight data");
    return;
  }

  for (TableRow row : table.rows()) {
    try {
      String date = row.getString(0);
      String[] dateParts = split(date, ' ')[0].split("/");
      int flightDay = int(dateParts[1]);
      
      if (flightDay == day) {
        // Get all columns in order
        String dateTime = row.getString(0);
        String airline = row.getString(1);
        String flightNum = row.getString(2);
        String originCode = row.getString(3);
        String originCity = row.getString(4);
        String originState = row.getString(5);
        String destCode = row.getString(6);
        String destCity = row.getString(7);
        String destState = row.getString(8);
        String depTime = row.getString(9);
        String arrTime = row.getString(10);
        String depDelay = row.getString(11);
        String arrDelay = row.getString(12);
        String cancelled = row.getString(13);
        String diverted = row.getString(14);
        String distance = row.getString(15);
        
        // Format exactly as requested with commas
        String flightInfo = String.join(",",
          dateTime, airline, flightNum, 
          originCode, originCity, originState,
          destCode, destCity, destState,
          depTime, arrTime, depDelay,
          arrDelay, cancelled, diverted,
          distance);
        
        flightData.add(flightInfo);
      }
    } catch (Exception e) {
      println("Error processing row: " + e);
    }
  }
  
  if (flightData.isEmpty()) {
    flightData.add("No flights found for day " + day);
  }
}

void drawFlightInfoScreen() {
  background(245);
  
  // Header
  fill(50);
  textSize(24);
  textAlign(CENTER);
  text("Flight Details for Day " + (selectedBarIndex + 1), width/2, 50);
  
  // Back button
  drawBackButton();
  
  // Flight list container
  fill(255);
  stroke(200);
  rect(50, 100, width - 100, height - 150, 10);
  
  // Flight details
  fill(60);
  textSize(12);
  textAlign(LEFT);
  
  int yPos = 130;
  int lineHeight = 20;
  
  // Column headers
  fill(0);
  textSize(14);
  String headers = "Date/Time,Airline,Flight#,Origin,City,State,Dest,City,State,Dep,Arr,DepDelay,ArrDelay,Cancelled,Diverted,Distance";
  text(headers, 70, yPos);
  yPos += lineHeight + 10;
  
  // Flight data
  textSize(12);
  for (String flight : flightData) {
    if (flight.startsWith("Error") || flight.startsWith("No flights")) {
      text(flight, 70, yPos);
      yPos += lineHeight;
    } else {
      text(flight, 70, yPos);
      yPos += lineHeight;
    }
    
    if (yPos > height - 50) break;
  }
}

void drawBackButton() {
  fill(70, 100, 220);
  rect(width - 100, 20, 80, 40, 5);
  fill(255);
  textSize(16);
  textAlign(CENTER, CENTER);
  text("Back", width - 60, 40);
}
