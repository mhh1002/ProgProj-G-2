void readData() {
    String[] data = loadStrings("flights2k.csv");
    for (int i = 1; i < data.length; i++) {  // Skip header row
        String[] parts = split(data[i], ",");
        if (parts.length >= 18) {  // Ensure we have enough columns

            // Extract values carefully, trimming spaces
            String flightDate = parts[0].trim();  
            String carrier = parts[1].trim();  
            String flightNumber = parts[2].trim();  
            String origin = parts[3].trim();  
            String originCity = parts[4].split(",")[0].trim();  // Extract city before comma
            String originAbb = parts[5].trim();
            
            int originWAC = parseInt(parts[6].trim());

            String dest = parts[7].trim();  
            String destAbb = parts[8].split(",")[0].trim();
            String destCity = parts[9].trim();

            int destWAC = parseInt(parts[10].trim());

            int crsDepTime = parseInt(parts[11].trim());  
            int depTime = (parts[12].trim().isEmpty()) ? -1 : parseInt(parts[12].trim());

            int crsArrTime = (parts[13].trim().isEmpty()) ? -1 : parseInt(parts[13].trim());
            int arrTime = (parts[14].trim().isEmpty()) ? -1 : parseInt(parts[14].trim());

            boolean cancelled = parseInt(parts[15].trim()) == 1;  
            boolean diverted = parseInt(parts[16].trim()) == 1;  

            int distance = parseInt(parts[17].trim());  

            // Store the parsed flight data
            flights.add(new Flight(flightDate, carrier, flightNumber, origin, originCity, originAbb, originWAC, 
                                   dest, destCity, destAbb, destWAC, crsDepTime, depTime, crsArrTime, arrTime, 
                                   cancelled, diverted, distance));
        }
    }
}

class Flight {
    String flightDate, carrier, flightNumber, origin, originCity, originAbb, dest, destCity, destAbb;
    int originWAC, destWAC, crsDepTime, depTime, crsArrTime, arrTime, distance;
    boolean cancelled, diverted;

    Flight(String flightDate, String carrier, String flightNumber, String origin, String originCity, String originAbb, 
           int originWAC, String dest, String destCity, String destAbb, int destWAC, 
           int crsDepTime, int depTime, int crsArrTime, int arrTime, boolean cancelled, boolean diverted, int distance) {
        this.flightDate = flightDate;
        this.carrier = carrier;
        this.flightNumber = flightNumber;
        this.origin = origin;
        this.originCity = originCity;
        this.originAbb = originAbb;
        this.originWAC = originWAC;
        this.dest = dest;
        this.destCity = destCity;
        this.destAbb = destAbb;
        this.destWAC = destWAC;
        this.crsDepTime = crsDepTime;
        this.depTime = depTime;
        this.crsArrTime = crsArrTime;
        this.arrTime = arrTime;
        this.cancelled = cancelled;
        this.diverted = diverted;
        this.distance = distance;
    }

    public String toString() {
        return flightDate + " | " + carrier + flightNumber + " | Origin City: " + originCity + " (" + originAbb + ") to destination: " + destCity + " (" + destAbb + ")" +
               " | Dep: " + (depTime == -1 ? "N/A" : depTime) +
               " | Arr: " + (arrTime == -1 ? "N/A" : arrTime) +
               " | Distance: " + distance + " miles" +
               " | " + (cancelled ? "CANCELLED" : "On Time") +
               " | " + (diverted ? "DIVERTED" : "Normal");
    }
}
